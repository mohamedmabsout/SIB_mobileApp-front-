import 'package:flutter/material.dart';
import 'package:dio/dio.dart';
import 'package:sib_expense_app/models/user_role.dart'; // Assuming you create this enum
import 'package:sib_expense_app/config/dio_client.dart'; // Import the helper

class AddEmployeeScreen extends StatefulWidget {
  final String token;

  const AddEmployeeScreen({Key? key, required this.token}) : super(key: key);

  @override
  _AddEmployeeScreenState createState() => _AddEmployeeScreenState();
}

class _AddEmployeeScreenState extends State<AddEmployeeScreen> {
  final _formKey = GlobalKey<FormState>();
  final _usernameController = TextEditingController();
  final _emailController = TextEditingController();
  // Password is generated by backend in your current setup
  // final _passwordController = TextEditingController();
  UserRole? _selectedRole = UserRole.EMPLOYEE; // Default role
  final _departmentController = TextEditingController();
  final _phoneController = TextEditingController();

  bool _isLoading = false;
  String? _errorMessage;

  final Dio _dio = createDioClient(); // Get the configured Dio instance


  @override
  void initState() {
    super.initState();
    // Add interceptor to automatically add the token
    _dio.interceptors.add(InterceptorsWrapper(
      onRequest: (options, handler) async {
        options.headers['Authorization'] = 'Bearer ${widget.token}';
        return handler.next(options);
      },
    ));
  }

  Future<void> _addEmployee() async {
    if (!_formKey.currentState!.validate()) return;

    if (_selectedRole == null) {
      setState(() {
        _errorMessage = 'Please select a role.';
      });
      return;
    }
    // Prevent ADMIN role creation from here if desired (backend already does this)
    // if (_selectedRole == UserRole.ADMIN) {
    //   setState(() { _errorMessage = 'Cannot create ADMIN user via this form.'; });
    //   return;
    // }

    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    try {
      // Use query parameters as defined in your AdminController @PostMapping
      final response = await _dio.post(
        '/api/admin/add-employee', // Endpoint for adding employee
        queryParameters: { // Use queryParameters for @RequestParam
          'username': _usernameController.text.trim(),
          'email': _emailController.text.trim(),
          'role': _selectedRole!.name, // Send enum name (e.g., "EMPLOYEE")
        },
        // If you also want to send department/phone, the backend endpoint
        // needs to be updated to accept them (e.g., via @RequestBody or more @RequestParam)
        // Example if using RequestBody (requires backend change):
        // data: {
        //   'username': _usernameController.text.trim(),
        //   'email': _emailController.text.trim(),
        //   'role': _selectedRole!.name,
        //   'department': _departmentController.text.trim().isNotEmpty ? _departmentController.text.trim() : null,
        //   'phone': _phoneController.text.trim().isNotEmpty ? _phoneController.text.trim() : null,
        // },
        // options: Options(headers: {'Content-Type': 'application/json'}),
      );

      // Your backend returns 200 OK on success for addEmployee
      if (response.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
              content: Text('Employee added successfully! Check email for password.'),
              backgroundColor: Colors.green),
        );
        Navigator.pop(context, true); // Pop back and indicate success
      } else {
        // Try to get error message from response if available
        String errorMsg = 'Failed to add employee.';
        if (response.data is Map && response.data.containsKey('error')) {
          errorMsg = response.data['error'];
        } else if (response.data is Map && response.data.containsKey('message')) {
          // Sometimes errors might be in 'message'
          errorMsg = response.data['message'];
        }
        setState(() {
          _errorMessage = '$errorMsg (Status: ${response.statusCode})';
        });
      }
    } on DioError catch (e) {
      setState(() {
        _errorMessage = 'Error adding employee: ${e.message}';
        if (e.response != null && e.response?.data is Map) {
          _errorMessage = e.response?.data['error'] ?? 'An error occurred.';
          print('Error response data: ${e.response?.data}');
        } else if (e.response != null) {
          _errorMessage = 'Server Error: ${e.response?.statusCode}';
        }
        else {
          _errorMessage = 'Network Error: Could not connect.';
        }
      });
      print('Error adding employee: $e');
    } catch (e) {
      setState(() {
        _errorMessage = 'An unexpected error occurred: $e';
      });
      print('Unexpected error: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  void dispose() {
    _usernameController.dispose();
    _emailController.dispose();
    _departmentController.dispose();
    _phoneController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add New Employee'),
        backgroundColor: Colors.blue[700],
      ),
      body: Stack( // Use Stack for background image if desired
        children: [
          Image.asset( // Optional background
            'assets/background.jpeg', // Or another background
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          SafeArea(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Form(
                key: _formKey,
                child: ListView( // Use ListView for scrollability
                  children: [
                    const SizedBox(height: 20), // Add some top spacing
                    TextFormField(
                      controller: _usernameController,
                      decoration: const InputDecoration(
                        labelText: 'Username *',
                        border: OutlineInputBorder(),
                        filled: true, fillColor: Colors.white70,
                      ),
                      validator: (value) => value == null || value.isEmpty ? 'Please enter username' : null,
                    ),
                    const SizedBox(height: 16.0),
                    TextFormField(
                      controller: _emailController,
                      keyboardType: TextInputType.emailAddress,
                      decoration: const InputDecoration(
                        labelText: 'Email *',
                        border: OutlineInputBorder(),
                        filled: true, fillColor: Colors.white70,
                      ),
                      validator: (value) {
                        if (value == null || value.isEmpty) return 'Please enter email';
                        if (!RegExp(r'^.+@.+\..+$').hasMatch(value)) return 'Enter a valid email'; // Basic email format check
                        return null;
                      },
                    ),
                    const SizedBox(height: 16.0),
                    // Dropdown for Role selection
                    DropdownButtonFormField<UserRole>(
                      value: _selectedRole,
                      items: UserRole.values.map((UserRole role) {
                        // Don't allow selecting ADMIN via this form
                        if (role == UserRole.ADMIN) return null;
                        return DropdownMenuItem<UserRole>(
                          value: role,
                          child: Text(role.name), // Display enum name (EMPLOYEE, MANAGER)
                        );
                      }).whereType<DropdownMenuItem<UserRole>>().toList(), // Filter out nulls
                      onChanged: (UserRole? newValue) {
                        setState(() {
                          _selectedRole = newValue;
                        });
                      },
                      decoration: const InputDecoration(
                        labelText: 'Role *',
                        border: OutlineInputBorder(),
                        filled: true, fillColor: Colors.white70,
                      ),
                      validator: (value) => value == null ? 'Please select a role' : null,
                    ),
                    const SizedBox(height: 16.0),
                    TextFormField(
                      controller: _departmentController,
                      decoration: const InputDecoration(
                        labelText: 'Department (Optional)',
                        border: OutlineInputBorder(),
                        filled: true, fillColor: Colors.white70,
                      ),
                    ),
                    const SizedBox(height: 16.0),
                    TextFormField(
                      controller: _phoneController,
                      keyboardType: TextInputType.phone,
                      decoration: const InputDecoration(
                        labelText: 'Phone (Optional)',
                        border: OutlineInputBorder(),
                        filled: true, fillColor: Colors.white70,
                      ),
                    ),
                    const SizedBox(height: 24.0),
                    if (_errorMessage != null)
                      Padding(
                        padding: const EdgeInsets.only(bottom: 16.0),
                        child: Text(
                          _errorMessage!,
                          style: const TextStyle(color: Colors.red, fontWeight: FontWeight.bold),
                          textAlign: TextAlign.center,
                        ),
                      ),
                    ElevatedButton(
                      onPressed: _isLoading ? null : _addEmployee,
                      style: ElevatedButton.styleFrom(
                          padding: const EdgeInsets.symmetric(vertical: 16.0),
                          textStyle: const TextStyle(fontSize: 16)
                      ),
                      child: _isLoading
                          ? const SizedBox(height: 20, width: 20, child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white))
                          : const Text('Add Employee'),
                    ),
                    const SizedBox(height: 20), // Add some bottom spacing
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}